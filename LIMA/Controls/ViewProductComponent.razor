@using Lima.Businuess
@inject IViewProducts ViewProduct

<div class="input-group mb-3">
    <input type="text"
        class="form-control form-control-lg"
        placeholder="Search product by name"
        @bind-value="SearchProduct"
        />
        <br />
        <button type="button" class="input-group-text btn-primary"
        @onclick="@(async()=>{await ViewProducts();})">View</button>
</div>
@if(this.DisplaySearchResult && _products != null && selectedProduct== null)
{
    <div style="overflow-y:auto; max-height : 300px; border:1px solid blue">
        <ul style="list-style-type:none">
            @foreach(var inv in _products)
            {
                <li style="cursor:pointer"@onclick="@(async() => {await SelectProduct(inv);})"
                    @key = "inv.ProductId">@inv.ProductName</li>
            }
        </ul>
    </div>

}

@code {
    private string? _SearchProduct;
    public string SearchProduct
    {
        get => _SearchProduct;
        
        set
        {
            _SearchProduct = value;
            if (!string.IsNullOrWhiteSpace(_SearchProduct) && SearchProduct.Length > 2)
            {
                ViewProducts();
            }
        }
    }

    private List<Product>? _products;
    private Product? selectedProduct;

    [Parameter]
    public EventCallback<List<Product>> OnSearchProducts { get; set; }

    [Parameter]
    public bool DisplaySearchResult { get; set; } = false;

    [Parameter]
    public EventCallback<Product> OnSelectProduct { get; set; }

    private async Task ViewProducts()
    {
        var products = (await ViewProduct.ExecuteAsync(SearchProduct ?? string.Empty))?.ToList();
        await OnSearchProducts.InvokeAsync(products);
        _products = products;
        this.selectedProduct = null;

        StateHasChanged();
    }
      private async Task SelectProduct(Product product)
    {
        await OnSelectProduct.InvokeAsync(product);
        selectedProduct = product;
    }
}
